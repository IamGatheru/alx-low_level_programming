!<arch>
0-isupper.c/    0           0     0     644     233       `
#include "main.h"
/**
 * _isupper - checks for uppercase character
 * @c: character parameter
 * Return: 1 (success) 0(otherwise)
 */
int _isupper(int c)
{
	if ((c >= 65) && (c <= 90))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     70        `
#include "main.h"
char *_memset(char *s, char b, unsigned int n)
{

}
0-strcat.c/     0           0     0     644     360       `
#include "main.h"
/**
 * _strcat - concatenates two strings
 * @dest: new string
 * @src: will be appended to dest
 * Return: 0 Always (success)
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}

	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     42        `
#include "main.h"
int _atoi(char *s)
{

}
1-isdigit.c/    0           0     0     644     230       `
#include "main.h"
/**
 * _isdigit - checks for a digit
 * @c: character parameter
 * Return: 1 (c is a digit) 0(c not a digit)
 */
int _isdigit(int c)
{
	if ((c >= 48) && (c <= 57))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     77        `
#include "main.h"
char *_memcpy(char *dest, char *src, unsigned int n)
{
	
}

1-strncat.c/    0           0     0     644     402       `
#include "main.h"
/**
 * _strncat - concatenate two strings
 * using at most n bytes from src
 * @dest: input value
 * @src: input value
 * @n: input value
 *
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (j < n && src[j] != '\0')
	{
	dest[i] = src[j];
	i++;
	j++;
	}
	dest[i] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     54        `
#include "main.h"
char *_strchr(char *s, char c)
{

}
2-strlen.c/     0           0     0     644     202       `
#include "main.h"

/**
 * _strlen - returns length of a string
 * *@s: The string
* Return: Always 0
 */
int _strlen(char *s)
{
	int len = 0;

	while (*s != '\0')
	{
		len++;
		s++;
	}
	return (len);
}
2-strncpy.c/    0           0     0     644     331       `
#include "main.h"
/**
 * _strncpy - copy a string
 * @dest: input value
 * @src: input value
 * @n: input value
 *
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int j;

	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
		j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}

	return (dest);
}


3-islower.c/    0           0     0     644     244       `
#include "main.h"
/**
 * _islower - checks for lowercase character
 *@c: the character to filter
 * Return: Always 1 (success) otherwise 0
 */
int _islower(int c)
{
	if ((c >= 97) && (c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     226       `
#include "main.h"
/**
 * _puts - prints a string followed by a new line
 * @str: string to be output
 * Return: Always 0 (success)
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str++);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     305       `
#include "main.h"
/**
 * _strcmp - compare string values
 * @s1: input value
 * @s2: input value
 *
 * Return: s1[i] - s2[i]
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	i = 0;
	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     67        `
#include "main.h"
unsigned int _strspn(char *s, char *accept)
{

}

4-isalpha.c/    0           0     0     644     248       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic character
 * @c: letter identifier
 * Return: 1(True), 0(False)
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     61        `
#include "main.h"
char *_strpbrk(char *s, char *accept)
{

}

5-strstr.c/     0           0     0     644     67        `
#include "main.h"
char *_strstr(char *haystack, char *needle)
{

}

6-abs.c/        0           0     0     644     245       `
#include "main.h"
/**
 * _abs - computes absolute value of an integer
 *@n: parameter
 * Return: Always 0(success)
 */
int _abs(int n)
{
	if (n > 0)
	{
		return (n);
	}
	else if (n == 0)
	{
		return (0);
	}
	else
	{
		return ((-1) * (n));
	}
}


9-strcpy.c/     0           0     0     644     426       `
#include "main.h"
/**
 * _strcpy - copies the contents of a string and the '\0'
 * @dest: new array that accomodates the old string
 * @src: Original string
 * Return: Always 0(success)
 */
char *_strcpy(char *dest, char *src)
{
	/*initialize the counter and the variables*/
	int i = 0;
	int len = 0;

	while (*(src + len) != '\0')
		len++;
	for (; i < len; i++)
	{
		dest[i] = src[i];
	}
	dest[len] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     250       `
#include <unistd.h>

/**
 *  _putchar - writes the character c to stdout
 *  @c: The character to print
 *
 *  Return: On success 1
 *  On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
